const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const { DirectSecp256k1Wallet } = require("@cosmjs/proto-signing");
const { SigningCosmWasmClient } = require("@cosmjs/cosmwasm-stargate");
const { coins, GasPrice } = require("@cosmjs/stargate");
const bech32 = require("bech32");

const app = express();
const PORT = 8080;

// Replace with your contract address and ZigChain RPC endpoint
const RPC_ENDPOINT = "https://public-zigchain-testnet-rpc.numia.xyz/";

app.use(bodyParser.json());
app.use(express.static("public"));

let stats = {
  visits: [],
  swaps: [],
};

// ‚úÖ Token info
const tokenMap = {
  ZIG: "uzig",
  ORO: "zig15jqg0hmp9n06q0as7uk3x9xkwr9k3r7yh4ww2uc0hek8zlryrgmsamk4qg",
  BEE: "zig1r50m5lafnmctat4xpvwdpzqndynlxt2skhr4fhzh76u0qar2y9hqu74u5h",
  STZIG: "zig19zqxslng99gw98ku3dyqaqy0c809kwssw7nzhea9x40jwxjugqvs5xaghj",
  FOMOFEAST: "zig1unc0549k2f0d7mjjyfm94fuz2x53wrx3px0pr55va27grdgmspcqsp4692",
  PUMP: "zig1k0728vraxvf7gn3dptlnlw5etrwlfd2yagf5u9jnsj9x7wpskds9xhjya",
  CULTCOIN: "zig1j55nw46crxkm03fjdf3cqx3py5cd32jny685x9c3gftfdt2xlvjs63znce",
  NFA: "zig1dye3zfsn83jmnxqdplkfmelyszhkve9ae6jfxf5mzgqnuylr0sdq8ng9tv",
  ZMZIG: "zig15meu4rk66v0wlp59tuewng4rpfvepagpfd8uq9w59rd77ce56dnqftmxn2",
};
const pairContracts = {
  // Native ZIG to CW20
  "ZIG:BEE": "zig1r50m5lafnmctat4xpvwdpzqndynlxt2skhr4fhzh76u0qar2y9hqu74u5h",
  "ZIG:ORO": "zig15jqg0hmp9n06q0as7uk3x9xkwr9k3r7yh4ww2uc0hek8zlryrgmsamk4qg",
  "ZIG:NFA": "zig1dye3zfsn83jmnxqdplkfmelyszhkve9ae6jfxf5mzgqnuylr0sdq8ng9tv",

  // Add reverse pairs as well if supported:
  "BEE:ZIG": "zig1r50m5lafnmctat4xpvwdpzqndynlxt2skhr4fhzh76u0qar2y9hqu74u5h",
  "ORO:ZIG": "zig15jqg0hmp9n06q0as7uk3x9xkwr9k3r7yh4ww2uc0hek8zlryrgmsamk4qg",
  "NFA:ZIG": "zig1dye3zfsn83jmnxqdplkfmelyszhkve9ae6jfxf5mzgqnuylr0sdq8ng9tv",

  // Add more token-to-token pairs as needed
};

const jokes = [
  "Why did the blockchain break up with the database? Too centralized!",
  "Why don‚Äôt crypto traders play hide and seek? Because good luck hiding on-chain!",
  "Why did the smart contract file a complaint? It felt exploited!",
  "Why was the crypto investor always calm? He had strong HODL skills.",
  "My wallet is so empty, even the gas fees laugh at it!",
];

const quotes = [
  "‚ÄúDecentralize or die.‚Äù ‚Äî Satoshi Nakamoto",
  "‚ÄúIn crypto we trust.‚Äù ‚Äî Anonymous",
  "‚ÄúNot your keys, not your coins.‚Äù ‚Äî Everyone",
  "‚ÄúHODL like your future depends on it.‚Äù",
  "‚ÄúThe revolution will be verified.‚Äù",
];

const learnTerms = {
  defi: "üß† DeFi (Decentralized Finance): Financial services without traditional banks. Includes swapping, lending, staking, etc.",
  staking: "üîê Staking: Locking your tokens to support the network and earn rewards.",
  gas: "‚õΩ Gas: A fee paid to process transactions on the blockchain.",
  wallet: "üëõ Wallet: A digital tool that stores your crypto and allows transactions.",
  blockchain: "üîó Blockchain: A decentralized digital ledger that records transactions.",
  validator: "‚úÖ Validator: A node that confirms blocks and transactions on a blockchain.",
  airdrop: "üéÅ Airdrop: Free crypto distributed to wallets, usually for marketing or rewards.",
  liquidity: "üíß Liquidity: How easily a token can be bought or sold without impacting price.",
  smartcontract: "üìÑ Smart Contract: Code on the blockchain that runs automatically when triggered.",
  nft: "üñºÔ∏è NFT (Non-Fungible Token): A unique digital asset representing art, music, etc.",
  bridge: "üåâ Bridge: A tool to transfer assets between different blockchains.",
  tokenomics: "üìä Tokenomics: The economics behind a crypto token (supply, distribution, utility).",
  halving: "üìâ Halving: An event where mining rewards are cut in half, common in Bitcoin.",
  rugpull: "üö® Rug Pull: A scam where developers abandon a project and run off with investors' money.",
  mainnet: "üöÄ Mainnet: The official live blockchain network.",
};


app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.post("/visit", (req, res) => {
  stats.visits.push(Date.now());
  saveStats();
  io.emit("statsUpdated", stats);
  res.json({ success: true });
});


app.post("/chat", async (req, res) => {
  const cmd = req.body.message.trim().toLowerCase();
  const msg = req.body.message.trim().toLowerCase();

  if (cmd === "learn") {
    const available = Object.keys(learnTerms)
      .map((t) => `üîπ ${t}`)
      .join("\n");
    return res.json({
      reply: `üìò Learn Mode Activated!\nWhich term would you like to learn?\n\n${available}`,
    });
  }

  if (learnTerms[cmd]) {
    return res.json({ reply: learnTerms[cmd] });
  }

  if (cmd === "quote") {
    return res.json({
      reply: `üí¨ ${quotes[Math.floor(Math.random() * quotes.length)]}`,
    });
  }

  if (cmd === "joke") {
    return res.json({
      reply: `üòÇ ${jokes[Math.floor(Math.random() * jokes.length)]}`,
    });
  }

  if (cmd === "emoji") {
    const emojis = ["üöÄ", "üíé", "üî•", "üß†", "üîê", "‚õìÔ∏è", "üìà", "üêã", "ü™ô", "üëõ"];
    return res.json({
      reply: emojis[Math.floor(Math.random() * emojis.length)],
    });
  }

  if (cmd === "time") {
    return res.json({
      reply: `üïí Current time: ${new Date().toLocaleTimeString()}`,
    });
  }

  if (cmd === "stats") {
    const now = Date.now();
    const cutoff = now - 24 * 60 * 60 * 1000;
    const visits = stats.visits.filter((t) => t > cutoff).length;
    const swaps = stats.swaps.filter((t) => t > cutoff).length;
    return res.json({
      reply: `üìä Stats (Last 24 hrs):\nVisits: ${visits}\nSwaps: ${swaps}`,
    });
  }


//   if (msg.startsWith("swap from")) {
//     try {
//       const parts = msg.split(" ");
//       const fromSymbol = parts[2].toUpperCase();
//       const toSymbol = parts[4].toUpperCase();
//       const amountZIG = parseFloat(parts[6]);
//       const privKey = parts.slice(8).join(" ").trim();

//       if (!tokenMap[fromSymbol] || !tokenMap[toSymbol]) {
//         return res.json({ reply: "‚ùå Unknown token symbol. Check your input." });
//       }

//       const keyBuffer = Buffer.from(privKey, "hex");
//       if (keyBuffer.length !== 32) {
//         return res.json({ reply: "‚ùå Invalid private key. Must be 32-byte hex." });
//       }

//       const pairKey = `${fromSymbol}:${toSymbol}`;
//       const CONTRACT_ADDRESS = pairContracts[pairKey];

//       if (!CONTRACT_ADDRESS) {
//         return res.json({ reply: `‚ùå No swap contract found for ${fromSymbol} ‚Üí ${toSymbol}` });
//       }

//  const fromDenom = tokenMap[fromSymbol];
// const toDenom = tokenMap[toSymbol];
// const amount = Math.floor(amountZIG * 1_000_000).toString(); // Always treat user input as ZIG

// const wallet = await DirectSecp256k1Wallet.fromKey(keyBuffer, "zig");
// const [account] = await wallet.getAccounts();

// const client = await SigningCosmWasmClient.connectWithSigner(RPC_ENDPOINT, wallet, {
//   gasPrice: GasPrice.fromString("0.025uzig"),
// });

// // üîÑ Adjust for native vs token
// const isNative = fromDenom === "uzig";

// const userBalance = await client.getBalance(account.address, isNative ? "uzig" : fromDenom);
// if (userBalance?.amount && parseInt(userBalance.amount) < parseInt(amount)) {
//   return res.json({ reply: `‚ùå Insufficient funds: You have ${userBalance.amount}, need ${amount}` });
// }

// const msgExecute = {
//   swap: {
//     offer_asset: {
//       amount,
//       info: fromDenom.startsWith("zig1")
//         ? { token: { contract_addr: fromDenom } }
//         : { native_token: { denom: fromDenom } },
//     },
//     ask_asset_info: toDenom.startsWith("zig1")
//       ? { token: { contract_addr: toDenom } }
//       : { native_token: { denom: toDenom } },
//   },
// };


// const result = await client.execute(
//   account.address,
//   CONTRACT_ADDRESS,
//   msgExecute,
//   {
//     amount: coins(5000, "uzig"),
//     gas: "2000000",
//   },
//   undefined,
//   fromDenom.startsWith("zig1") ? [] : coins(amount, fromDenom)
// );

    // const msgExecute = {
    //   swap: {
    //     offer_asset: {
    //       amount,
    //       info: fromDenom.startsWith("zig1")
    //         ? { token: { contract_addr: fromDenom } }
    //         : { native_token: { denom: fromDenom } },
    //     },
    //     ask_asset_info: toDenom.startsWith("zig1")
    //       ? { token: { contract_addr: toDenom } }
    //       : { native_token: { denom: toDenom } },
    //     belief_price: "2", // from simulation
    //     max_spread: 0.5, // try 0.2 or even 0.5 for testing
    //   },
    // };
    // const msgExecute = {
    //   swap: {
    //     input_token: fromDenom,
    //     output_token: toDenom,
    //     input_amount: amount,
    //     min_output: "1"
    //   }
    // };


    //   const result = await client.execute(
    //     account.address,
    //     CONTRACT_ADDRESS,
    //     msgExecute,
    //     {
    //       amount: coins(5000, "uzig"),
    //       gas: "2000000",
    //     },
    //     undefined,
    //     fromDenom.startsWith("zig1") ? [] : coins(amount, fromDenom)
    //   );
      if (msg.startsWith("swap from")) {
        try {
          const parts = msg.split(" ");
          const fromSymbol = parts[2].toUpperCase();
          const toSymbol = parts[4].toUpperCase();
          const amountZIG = parseFloat(parts[6]);
          const address = parts[8];

          if (!tokenMap[fromSymbol] || !tokenMap[toSymbol]) {
            return res.json({ reply: "‚ùå Unknown token symbol. Check your input." });
          }
          if (!address || address.length < 10) {
            return res.json({ reply: "‚ùå Invalid wallet address." });
          }

          // Just log stats, reply success (actual swap is done client-side)
          stats.swaps.push(Date.now());
          return res.json({
            reply: `üìù Swap request received!\nüîÅ ${fromSymbol} ‚Üí ${toSymbol}\nAmount: ${amountZIG}\nWallet: ${address}\n\nPlease approve the transaction in your wallet extension.`,
          });
        } catch (err) {
          console.error("Swap failed:", err);
          return res.json({ reply: `‚ùå Swap failed: ${err.message}` });
        }
      }

  // fallback
  return res.json({
    reply: "ü§ñ Unknown command. Try: swap from ZIG to BEE amount 10 key <private-key>",
  });
});

app.listen(PORT, () => {
  console.log(`‚úÖ ZigChatBot running at http://localhost:${PORT}`);
});